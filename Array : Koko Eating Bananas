public class Solution {

    // Function to determine if Koko can eat all bananas at speed K within H hours
    public boolean canEatAllBananas(int[] piles, int K, int H) {
        int hours = 0;
        for (int pile : piles) {
            hours += Math.ceil((double) pile / K);
        }
        return hours <= H;
    }

    // Function to find the minimum eating speed K
    public int minEatingSpeed(int[] piles, int H) {
        int left = 1;
        int right = getMax(piles);
        
        while (left < right) {
            int mid = left + (right - left) / 2;

            if (canEatAllBananas(piles, mid, H)) 
                right = mid; // Try to find a smaller K
            else 
                left = mid + 1; // Increase K
            
        }

        return left;
    }

    // Helper function to get the maximum value in the piles array
    public int getMax(int[] piles) {
        int max = Integer.MIN_VALUE;
        
        for (int pile : piles) 
            if (pile > max) 
                max = pile;
            
        return max;
    }
}
